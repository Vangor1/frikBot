from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes

import database


async def choose_subject(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è.
    """
    query = update.callback_query
    await query.answer()
    subjects = database.get_subjects()
    if not subjects:
        await query.edit_message_text(
            "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è.",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("üîô –í –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="profile")]]
            ),
        )
        return
    keyboard = [
        [InlineKeyboardButton(subject[1], callback_data=f"subject_{subject[0]}")]
        for subject in subjects
    ]
    keyboard.append(
        [InlineKeyboardButton("üîô –í –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="profile")]
    )
    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def choose_stage(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–¥–µ–ª–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è.
    """
    query = update.callback_query
    await query.answer()
    subject_id = int(query.data.split("_")[1])
    context.user_data["subject_id"] = subject_id
    stages = database.get_stages_by_subject(subject_id)
    print("DEBUG stages:", stages)
    if not stages:
        await query.edit_message_text(
            "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è.",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("üîô –í –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="profile")]]
            ),
        )
        return
    keyboard = [
        [InlineKeyboardButton(stage[1], callback_data=f"stage_{stage[0]}")]
        for stage in stages
    ]
    keyboard.append(
        [InlineKeyboardButton("üîô –í –≤—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞", callback_data="choose_subject")]
    )
    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —ç—Ç–∞–ø –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(keyboard)
    )


def can_open_next_stage(user_id: int, stage_id: int, threshold: int = 80) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫—Ä—ã—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø:
    —Å—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –ø–æ —Ç–µ–º–∞–º —ç—Ç–∞–ø–∞ >= threshold.
    """
    avg = database.get_average_grade(user_id, stage_id)
    return avg is not None and avg >= threshold


async def choose_section(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–¥–µ–ª–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è.
    """
    query = update.callback_query
    await query.answer()
    stage_id = int(query.data.split("_")[1])
    context.user_data["stage_id"] = stage_id
    if stage_id == 1:
        # –≠—Ç–∞–ø 1 –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω
        accessible = True
    else:
        accessible = can_open_next_stage(query.from_user.id, stage_id, threshold=80)
    if accessible:
        sections = database.get_sections_by_stage(stage_id)
        keyboard = [
            [InlineKeyboardButton(section[1], callback_data=f"section_{section[0]}")]
            for section in sections
        ]
        keyboard.append(
            [
                InlineKeyboardButton(
                    "üîô –í –≤—ã–±–æ—Ä —ç—Ç–∞–ø–∞",
                    callback_data=f"subject_{context.user_data['subject_id']}",
                )
            ]
        )
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        await query.edit_message_text(
            """–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å —ç—Ç–æ—Ç —ç—Ç–∞–ø, —Ç–∞–∫ –∫–∞–∫ –≤–∞—à–∞ —Å—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞
            –ø–æ —Ç–µ–º–∞–º –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —ç—Ç–∞–ø–∞ –Ω–∏–∂–µ 80%.""",
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            "üîô –í –≤—ã–±–æ—Ä —ç—Ç–∞–ø–∞",
                            callback_data=f"subject_{context.user_data['subject_id']}",
                        )
                    ]
                ]
            ),
        )

import re
from datetime import datetime, timedelta

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes, ConversationHandler

import database
from database import add_reminder, get_average_grade_for_stage
from handlers.schedule.shedule_send import send_reminder

REQUEST_TEXT = 1
WAIT_DATE = 2


async def choose_subject_for_reminder(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
):
    """
    –û–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è.
    """
    print("DEBUG choose_subject_for_reminder")
    query = update.callback_query
    await query.answer()
    context.user_data["day"] = query.data
    print("DEBUG ", context.user_data["day"])
    chat_id = int(query.message.chat.id)
    user_subjects = database.get_user_subjects(chat_id)
    keyboard = [
        [
            InlineKeyboardButton(
                subject[1], callback_data=f"subjectforreminder_{subject[0]}"
            )
        ]
        for subject in user_subjects
    ]
    keyboard.append(
        [InlineKeyboardButton("üîô –í –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="profile")]
    )
    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è:",
        reply_markup=InlineKeyboardMarkup(keyboard),
    )


async def choose_stage(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–¥–µ–ª–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è.
    """
    query = update.callback_query
    await query.answer()
    subject_id = context.user_data.get("subject_id")
    stages = database.get_stages_by_subject(subject_id)
    print("DEBUG stages:", stages)
    keyboard = [
        [InlineKeyboardButton(stage[1], callback_data=f"stage_{stage[0]}")]
        for stage in stages
    ]
    keyboard.append(
        [
            InlineKeyboardButton(
                "üîô –í –õ–ö",
                callback_data="profile",
            ),
            InlineKeyboardButton(
                "üîô –í –≤—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞", callback_data=context.user_data["day"]
            ),
        ]
    )
    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —ç—Ç–∞–ø –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(keyboard)
    )


def can_open_next_stage(user_id: int, stage_id: int, threshold: int = 80) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫—Ä—ã—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø:
    –î–ª—è —ç—Ç–æ–≥–æ –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç—Å—è —Å—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–µ–º–∞–º –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —ç—Ç–∞–ø–∞.
    –ï—Å–ª–∏ —Å—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —ç—Ç–∞–ø–∞ —Ä–∞–≤–Ω–∞ –∏–ª–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç >= threshold.
    """
    prev_stage_id = stage_id - 1
    if prev_stage_id < 1:
        return True
    avg = get_average_grade_for_stage(user_id, prev_stage_id)
    return avg is not None and avg >= threshold


async def choose_section(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–¥–µ–ª–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è.
    """
    query = update.callback_query
    await query.answer()
    stage_id = context.user_data.get("stage_id")
    subject_id = context.user_data["subject_id"]
    if stage_id == 1:
        # –≠—Ç–∞–ø 1 –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω
        accessible = True
    else:
        accessible = can_open_next_stage(query.from_user.id, stage_id, threshold=80)
    if accessible:
        sections = database.get_sections_by_stage(stage_id)
        print(sections)
        keyboard = [
            [InlineKeyboardButton(section[1], callback_data=f"section_{section[0]}")]
            for section in sections
        ]
        keyboard.append(
            [
                InlineKeyboardButton(
                    "üîô –í –õ–ö",
                    callback_data="profile",
                ),
                InlineKeyboardButton(
                    "üîô –ù–∞–∑–∞–¥",
                    callback_data=f"subjectforreminder_{subject_id}",
                ),
            ],
        )
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è",
            reply_markup=InlineKeyboardMarkup(keyboard),
        )
    else:
        await query.edit_message_text(
            """–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å —ç—Ç–æ—Ç —ç—Ç–∞–ø, —Ç–∞–∫ –∫–∞–∫ –≤–∞—à–∞ —Å—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞
            –ø–æ —Ç–µ–º–∞–º –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —ç—Ç–∞–ø–∞ –Ω–∏–∂–µ 80%.""",
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            "üîô –í –≤—ã–±–æ—Ä —ç—Ç–∞–ø–∞",
                            callback_data=f"stage_{stage_id}",
                        )
                    ]
                ]
            ),
        )


async def choose_topic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è.
    """
    query = update.callback_query
    await query.answer()
    section_id = context.user_data.get("section_id")
    stage_id = context.user_data.get("stage_id")
    topics = database.get_topics_by_section(section_id)
    print(topics)
    keyboard = [
        [InlineKeyboardButton(topic[1], callback_data=f"topic_{topic[0]}")]
        for topic in topics
    ]
    keyboard.append(
        [
            InlineKeyboardButton(
                "üîô –í –õ–ö",
                callback_data="profile",
            ),
            InlineKeyboardButton(
                "üîô –í –≤—ã–±–æ—Ä —Ä–∞–∑–¥–µ–ª–∞",
                callback_data=f"stage_{stage_id}",
            ),
        ]
    )
    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è",
        reply_markup=InlineKeyboardMarkup(keyboard),
    )


async def selection_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ‚Äî –≤—ã–≤–æ–¥–∏—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    """
    print("DEBUG selection_date")
    query = update.callback_query
    await query.answer()
    topic_id = int(query.data.split("_")[1])
    print("topic----id: ", topic_id)
    context.user_data["topic_id"] = topic_id
    print("DEBUG callback_data:", context.user_data["day"])
    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ–∂–¥—É —Å—Ç—Ä–æ–∫–æ–π –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π data –∏ —à–∞–±–ª–æ–Ω–æ–º
    m = re.match(r"^day_(\d+)$", context.user_data["day"], flags=re.IGNORECASE)
    if not m:
        await query.answer()
        return
    day = int(m.group(1))
    month = context.user_data["calendar_month"]
    year = context.user_data["calendar_year"]
    selected_date = datetime(year, month, day)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –∏ –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è –∏ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    context.user_data["selected_date"] = selected_date
    markup = InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="profile"),
            ]
        ]
    )
    print("DEBUG selected_date:", context.user_data["selected_date"])
    await query.edit_message_text(
        f"–î–∞—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞: {context.user_data['selected_date'].date()}\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∏ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–µ: \n"
        "–ß–ß:–ú–ú –¢–µ–∫—Å—Ç\n",
        reply_markup=markup,
    )
    return REQUEST_TEXT


async def receive_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç
    """
    print("DEBUG receive_text")
    user_text = update.message.text
    user_text = update.message.text.strip()
    markup = InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="profile"),
            ]
        ]
    )
    if " " not in user_text:
        await update.message.reply_text(
            "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.\n" "–§–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú –¢–µ–∫—Å—Ç\n",
            reply_markup=markup,
        )
        return REQUEST_TEXT
    time_str, message_text = user_text.split(" ", 1)
    try:
        remind_time = datetime.strptime(time_str, "%H:%M").time()
    except ValueError:
        await update.message.reply_text(
            "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.\n"
            "–§–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú –¢–µ–∫—Å—Ç\n",
            reply_markup=markup,
        )
        return REQUEST_TEXT
    date = context.user_data.get("selected_date")
    if not date:
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –≤—Ä–µ–º–µ–Ω–∏.\n",
            reply_markup=markup,
        )
        return REQUEST_TEXT
    remind_date_time = datetime.combine(date.date(), remind_time)
    now = datetime.now()
    if remind_date_time <= now:  # –ï—Å–ª–∏ –≤—Ä–µ–º—è –ø—Ä–æ—à–ª–æ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
        remind_date_time += timedelta(days=1)
    chat_id = update.effective_chat.id
    subject_id = context.user_data.get("subject_id")
    stage_id = context.user_data.get("stage_id")
    section_id = context.user_data.get("section_id")
    topic_id = context.user_data.get("topic_id")
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –ë–î
    remind_id = add_reminder(
        chat_id,
        remind_date_time,
        message_text,
        subject_id,
        stage_id,
        section_id,
        topic_id,
    )
    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
    delay = (remind_date_time - now).total_seconds()
    context.job_queue.run_once(
        send_reminder,
        when=delay,
        chat_id=chat_id,
        data={"message": message_text, "reminder_id": remind_id},
        name=str(remind_id),
    )
    await update.message.reply_text(
        f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {remind_date_time.strftime('%Y-%m-%d %H:%M')}"
    )
    await update.message.reply_text(
        "üîô –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç...",
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("üè† –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="profile")]]
        ),
    )
    return ConversationHandler.END

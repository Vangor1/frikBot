import re
from datetime import datetime, timedelta

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes, ConversationHandler

import db
from handlers.schedule.shedule_send import send_reminder

REQUEST_TEXT = 1
WAIT_DATE = 2


async def selection_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ‚Äî –≤—ã–≤–æ–¥–∏—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    """
    print("DEBUG selection_date")
    query = update.callback_query
    await query.answer()
    data = query.data
    print("DEBUG callback_data:", data)
    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ–∂–¥—É —Å—Ç—Ä–æ–∫–æ–π –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π data –∏ —à–∞–±–ª–æ–Ω–æ–º
    m = re.match(r"^day_(\d+)$", data, flags=re.IGNORECASE)
    if not m:
        await query.answer()
        return
    day = int(m.group(1))
    month = context.user_data["calendar_month"]
    year = context.user_data["calendar_year"]
    selected_date = datetime(year, month, day)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –∏ –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è –∏ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    context.user_data["selected_date"] = selected_date
    markup = InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="CANCEL"),
            ]
        ]
    )
    await query.edit_message_text(
        f"–î–∞—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞: {selected_date.date()}\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∏ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–µ: \n"
        "–ß–ß:–ú–ú –¢–µ–∫—Å—Ç\n",
        reply_markup=markup,
    )
    return REQUEST_TEXT


async def receive_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç
    """
    user_text = update.message.text
    user_text = update.message.text.strip()
    if " " not in user_text:
        await update.message.reply_text(
            "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.\n"
            "–§–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú –¢–µ–∫—Å—Ç\n"
            "–ò–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
        )
        return REQUEST_TEXT
    time_str, message_text = user_text.split(" ", 1)
    try:
        remind_time = datetime.strptime(time_str, "%H:%M").time()
    except ValueError:
        await update.message.reply_text(
            "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.\n"
            "–§–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú –¢–µ–∫—Å—Ç\n"
            "–ò–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
        )
        return REQUEST_TEXT
    date = context.user_data.get("selected_date")
    if not date:
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –≤—Ä–µ–º–µ–Ω–∏.\n" "–ò–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
        )
        return REQUEST_TEXT
    remind_date_time = datetime.combine(date.date(), remind_time)
    now = datetime.now()
    if remind_date_time <= now:  # –ï—Å–ª–∏ –≤—Ä–µ–º—è –ø—Ä–æ—à–ª–æ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
        remind_date_time += timedelta(days=1)
    chat_id = update.effective_chat.id
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –ë–î
    remind_id = db.add_reminder(chat_id, remind_date_time, message_text)
    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
    delay = (remind_date_time - now).total_seconds()
    context.job_queue.run_once(
        send_reminder,
        when=delay,
        chat_id=chat_id,
        data={"message": message_text, "reminder_id": remind_id},
    )
    await update.message.reply_text(
        f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {remind_date_time.strftime('%Y-%m-%d %H:%M')}"
    )
    await update.message.reply_text(
        "üîô –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç...",
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("üè† –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="profile")]]
        ),
    )
    return ConversationHandler.END
